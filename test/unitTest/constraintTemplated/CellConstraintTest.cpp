
#include "constraintTemplated/CellConstraint.hpp"

#include <doctest.h>

TEST_SUITE("Constraints: Items") {

  TEST_CASE("CellConstraint") {

    SUBCASE("4x5x6") {
      const auto constraint = CellConstraint<PuzzleIntrinsics<{3, 4, 5}>{}>();
      CHECK_EQ(constraint.getPrimaryItemsAmount(), 12);
      const auto expectedPrimaryItems = std::array<std::vector<int32_t>, 60>{
          std::vector{0},  {0},  {0},  {0},  {0},  {1},  {1},  {1},  {1},  {1},
          std::vector{2},  {2},  {2},  {2},  {2},  {3},  {3},  {3},  {3},  {3},
          std::vector{4},  {4},  {4},  {4},  {4},  {5},  {5},  {5},  {5},  {5},
          std::vector{6},  {6},  {6},  {6},  {6},  {7},  {7},  {7},  {7},  {7},
          std::vector{8},  {8},  {8},  {8},  {8},  {9},  {9},  {9},  {9},  {9},
          std::vector{10}, {10}, {10}, {10}, {10}, {11}, {11}, {11}, {11}, {11},
      };
      CHECK_EQ(constraint.primaryItems, expectedPrimaryItems);

      CHECK_EQ(constraint.getSecondaryItemsAmount(), 0);
      CHECK(std::ranges::all_of(constraint.secondaryItems, [&](const auto& option) { return option.empty(); }));
    }

    SUBCASE("9x9x9") {
      const auto constraint = CellConstraint<PuzzleIntrinsics<{9, 9, 9}>{}>();
      CHECK_EQ(constraint.getPrimaryItemsAmount(), 81);
      const auto expectedPrimaryItems = std::array<std::vector<int32_t>, 729>{
          std::vector{0},  {0},  {0},  {0},  {0},  {0},  {0},  {0},  {0},
          std::vector{1},  {1},  {1},  {1},  {1},  {1},  {1},  {1},  {1},
          std::vector{2},  {2},  {2},  {2},  {2},  {2},  {2},  {2},  {2},
          std::vector{3},  {3},  {3},  {3},  {3},  {3},  {3},  {3},  {3},
          std::vector{4},  {4},  {4},  {4},  {4},  {4},  {4},  {4},  {4},
          std::vector{5},  {5},  {5},  {5},  {5},  {5},  {5},  {5},  {5},
          std::vector{6},  {6},  {6},  {6},  {6},  {6},  {6},  {6},  {6},
          std::vector{7},  {7},  {7},  {7},  {7},  {7},  {7},  {7},  {7},
          std::vector{8},  {8},  {8},  {8},  {8},  {8},  {8},  {8},  {8},
          std::vector{9},  {9},  {9},  {9},  {9},  {9},  {9},  {9},  {9},
          std::vector{10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10},
          std::vector{11}, {11}, {11}, {11}, {11}, {11}, {11}, {11}, {11},
          std::vector{12}, {12}, {12}, {12}, {12}, {12}, {12}, {12}, {12},
          std::vector{13}, {13}, {13}, {13}, {13}, {13}, {13}, {13}, {13},
          std::vector{14}, {14}, {14}, {14}, {14}, {14}, {14}, {14}, {14},
          std::vector{15}, {15}, {15}, {15}, {15}, {15}, {15}, {15}, {15},
          std::vector{16}, {16}, {16}, {16}, {16}, {16}, {16}, {16}, {16},
          std::vector{17}, {17}, {17}, {17}, {17}, {17}, {17}, {17}, {17},
          std::vector{18}, {18}, {18}, {18}, {18}, {18}, {18}, {18}, {18},
          std::vector{19}, {19}, {19}, {19}, {19}, {19}, {19}, {19}, {19},
          std::vector{20}, {20}, {20}, {20}, {20}, {20}, {20}, {20}, {20},
          std::vector{21}, {21}, {21}, {21}, {21}, {21}, {21}, {21}, {21},
          std::vector{22}, {22}, {22}, {22}, {22}, {22}, {22}, {22}, {22},
          std::vector{23}, {23}, {23}, {23}, {23}, {23}, {23}, {23}, {23},
          std::vector{24}, {24}, {24}, {24}, {24}, {24}, {24}, {24}, {24},
          std::vector{25}, {25}, {25}, {25}, {25}, {25}, {25}, {25}, {25},
          std::vector{26}, {26}, {26}, {26}, {26}, {26}, {26}, {26}, {26},
          std::vector{27}, {27}, {27}, {27}, {27}, {27}, {27}, {27}, {27},
          std::vector{28}, {28}, {28}, {28}, {28}, {28}, {28}, {28}, {28},
          std::vector{29}, {29}, {29}, {29}, {29}, {29}, {29}, {29}, {29},
          std::vector{30}, {30}, {30}, {30}, {30}, {30}, {30}, {30}, {30},
          std::vector{31}, {31}, {31}, {31}, {31}, {31}, {31}, {31}, {31},
          std::vector{32}, {32}, {32}, {32}, {32}, {32}, {32}, {32}, {32},
          std::vector{33}, {33}, {33}, {33}, {33}, {33}, {33}, {33}, {33},
          std::vector{34}, {34}, {34}, {34}, {34}, {34}, {34}, {34}, {34},
          std::vector{35}, {35}, {35}, {35}, {35}, {35}, {35}, {35}, {35},
          std::vector{36}, {36}, {36}, {36}, {36}, {36}, {36}, {36}, {36},
          std::vector{37}, {37}, {37}, {37}, {37}, {37}, {37}, {37}, {37},
          std::vector{38}, {38}, {38}, {38}, {38}, {38}, {38}, {38}, {38},
          std::vector{39}, {39}, {39}, {39}, {39}, {39}, {39}, {39}, {39},
          std::vector{40}, {40}, {40}, {40}, {40}, {40}, {40}, {40}, {40},
          std::vector{41}, {41}, {41}, {41}, {41}, {41}, {41}, {41}, {41},
          std::vector{42}, {42}, {42}, {42}, {42}, {42}, {42}, {42}, {42},
          std::vector{43}, {43}, {43}, {43}, {43}, {43}, {43}, {43}, {43},
          std::vector{44}, {44}, {44}, {44}, {44}, {44}, {44}, {44}, {44},
          std::vector{45}, {45}, {45}, {45}, {45}, {45}, {45}, {45}, {45},
          std::vector{46}, {46}, {46}, {46}, {46}, {46}, {46}, {46}, {46},
          std::vector{47}, {47}, {47}, {47}, {47}, {47}, {47}, {47}, {47},
          std::vector{48}, {48}, {48}, {48}, {48}, {48}, {48}, {48}, {48},
          std::vector{49}, {49}, {49}, {49}, {49}, {49}, {49}, {49}, {49},
          std::vector{50}, {50}, {50}, {50}, {50}, {50}, {50}, {50}, {50},
          std::vector{51}, {51}, {51}, {51}, {51}, {51}, {51}, {51}, {51},
          std::vector{52}, {52}, {52}, {52}, {52}, {52}, {52}, {52}, {52},
          std::vector{53}, {53}, {53}, {53}, {53}, {53}, {53}, {53}, {53},
          std::vector{54}, {54}, {54}, {54}, {54}, {54}, {54}, {54}, {54},
          std::vector{55}, {55}, {55}, {55}, {55}, {55}, {55}, {55}, {55},
          std::vector{56}, {56}, {56}, {56}, {56}, {56}, {56}, {56}, {56},
          std::vector{57}, {57}, {57}, {57}, {57}, {57}, {57}, {57}, {57},
          std::vector{58}, {58}, {58}, {58}, {58}, {58}, {58}, {58}, {58},
          std::vector{59}, {59}, {59}, {59}, {59}, {59}, {59}, {59}, {59},
          std::vector{60}, {60}, {60}, {60}, {60}, {60}, {60}, {60}, {60},
          std::vector{61}, {61}, {61}, {61}, {61}, {61}, {61}, {61}, {61},
          std::vector{62}, {62}, {62}, {62}, {62}, {62}, {62}, {62}, {62},
          std::vector{63}, {63}, {63}, {63}, {63}, {63}, {63}, {63}, {63},
          std::vector{64}, {64}, {64}, {64}, {64}, {64}, {64}, {64}, {64},
          std::vector{65}, {65}, {65}, {65}, {65}, {65}, {65}, {65}, {65},
          std::vector{66}, {66}, {66}, {66}, {66}, {66}, {66}, {66}, {66},
          std::vector{67}, {67}, {67}, {67}, {67}, {67}, {67}, {67}, {67},
          std::vector{68}, {68}, {68}, {68}, {68}, {68}, {68}, {68}, {68},
          std::vector{69}, {69}, {69}, {69}, {69}, {69}, {69}, {69}, {69},
          std::vector{70}, {70}, {70}, {70}, {70}, {70}, {70}, {70}, {70},
          std::vector{71}, {71}, {71}, {71}, {71}, {71}, {71}, {71}, {71},
          std::vector{72}, {72}, {72}, {72}, {72}, {72}, {72}, {72}, {72},
          std::vector{73}, {73}, {73}, {73}, {73}, {73}, {73}, {73}, {73},
          std::vector{74}, {74}, {74}, {74}, {74}, {74}, {74}, {74}, {74},
          std::vector{75}, {75}, {75}, {75}, {75}, {75}, {75}, {75}, {75},
          std::vector{76}, {76}, {76}, {76}, {76}, {76}, {76}, {76}, {76},
          std::vector{77}, {77}, {77}, {77}, {77}, {77}, {77}, {77}, {77},
          std::vector{78}, {78}, {78}, {78}, {78}, {78}, {78}, {78}, {78},
          std::vector{79}, {79}, {79}, {79}, {79}, {79}, {79}, {79}, {79},
          std::vector{80}, {80}, {80}, {80}, {80}, {80}, {80}, {80}, {80},
      };
      CHECK_EQ(constraint.primaryItems, expectedPrimaryItems);

      CHECK_EQ(constraint.getSecondaryItemsAmount(), 0);
      CHECK(std::ranges::all_of(constraint.secondaryItems, [&](const auto& option) { return option.empty(); }));
    }
  }
}