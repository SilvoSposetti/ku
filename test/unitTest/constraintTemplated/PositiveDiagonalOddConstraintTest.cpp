
#include "constraintTemplated/PositiveDiagonalOddConstraint.hpp"

#include "ConstraintTestHelpers.hpp"

#include <doctest.h>

TEST_SUITE("Constraints") {

  TEST_CASE("PositiveDiagonalOddConstraint") {

    SUBCASE("Members") {
      memberChecks<PositiveDiagonalOddConstraint<PuzzleIntrinsics<{0, 0, 0}>{}>>();
    }

    SUBCASE("Implicit Option Coverage") {
      GENERATE_SUBCASE(PositiveDiagonalOddConstraint, 1, 1, 1);
      GENERATE_SUBCASE(PositiveDiagonalOddConstraint, 2, 2, 5);
      GENERATE_SUBCASE(PositiveDiagonalOddConstraint, 3, 3, 3);
      GENERATE_SUBCASE(PositiveDiagonalOddConstraint, 7, 7, 4);
      GENERATE_SUBCASE(PositiveDiagonalOddConstraint, 8, 8, 2);
    }

    SUBCASE("Not supported") {
      // No odd digits
      CHECK(!PositiveDiagonalOddConstraint<PuzzleIntrinsics<{5, 5, 0}>{}>().supportsPuzzle());
      // Not square
      CHECK(!PositiveDiagonalOddConstraint<PuzzleIntrinsics<{5, 4, 5}>{}>().supportsPuzzle());
      CHECK(!PositiveDiagonalOddConstraint<PuzzleIntrinsics<{1, 7, 5}>{}>().supportsPuzzle());
    }

    SUBCASE("Explicit Options") {
      SUBCASE("2x2x0") {
        constexpr auto intrinsics = PuzzleIntrinsics<{2, 2, 0}>();
        checkConstraintOptions<intrinsics, 1, 0>(PositiveDiagonalOddConstraint<intrinsics>(), 0, {}, 0, {});
      }

      SUBCASE("2x2x2") {
        constexpr auto intrinsics = PuzzleIntrinsics<{2, 2, 2}>();
        checkConstraintOptions<intrinsics, 1, 0>(PositiveDiagonalOddConstraint<intrinsics>(),
                                                 2,
                                                 std::vector<Option<1>>{
                                                     {},
                                                     {},
                                                     {0},
                                                     {},
                                                     {1},
                                                     {},
                                                     {},
                                                     {},
                                                 },
                                                 0,
                                                 {});
      }

      SUBCASE("5x5x7") {
        constexpr auto intrinsics = PuzzleIntrinsics<{5, 5, 7}>{};
        checkConstraintOptions<intrinsics, 1, 0>(
            PositiveDiagonalOddConstraint<intrinsics>(),
            5,
            std::vector<Option<1>>{
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {},
                {},  {}, {},  {}, {},  {}, {0}, {}, {0}, {}, {0}, {}, {0}, {}, {},  {}, {},  {}, {},  {}, {},  {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {1}, {}, {1}, {}, {1}, {}, {1}, {}, {},  {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {2}, {}, {2}, {},
                {2}, {}, {2}, {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {},
                {},  {}, {3}, {}, {3}, {}, {3}, {}, {3}, {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {},
                {},  {}, {},  {}, {},  {}, {},  {}, {4}, {}, {4}, {}, {4}, {}, {4}, {}, {},  {}, {},  {}, {},  {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},
            },
            0,
            {});
      }

      SUBCASE("9x9x9") {
        constexpr auto intrinsics = PuzzleIntrinsics<{9, 9, 9}>{};
        checkConstraintOptions<intrinsics, 1, 0>(
            PositiveDiagonalOddConstraint<intrinsics>(),
            9,
            std::vector<Option<1>>{
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {0}, {}, {0}, {}, {0}, {}, {0}, {}, {0}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {1}, {}, {1}, {}, {1}, {}, {1}, {}, {1}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {2}, {}, {2}, {}, {2}, {}, {2}, {}, {2}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {3}, {}, {3}, {}, {3}, {}, {3}, {}, {3}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {4}, {}, {4}, {}, {4}, {}, {4}, {}, {4}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {5}, {}, {5}, {}, {5}, {}, {5}, {}, {5}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {6}, {}, {6}, {}, {6}, {}, {6}, {}, {6}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {7}, {}, {7}, {}, {7}, {}, {7}, {}, {7}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {8}, {}, {8}, {}, {8}, {}, {8}, {}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {}, {},  {}, {},  {}, {},  {}, {},
            },
            0,
            {});
      }
    }
  }
}