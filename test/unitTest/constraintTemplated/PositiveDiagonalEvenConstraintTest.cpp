
#include "constraintTemplated/PositiveDiagonalEvenConstraint.hpp"

#include "ConstraintTestHelpers.hpp"

#include <doctest.h>

TEST_SUITE("Constraints") {

  TEST_CASE("PositiveDiagonalEvenConstraint") {

    SUBCASE("Members") {
      memberChecks<PositiveDiagonalEvenConstraint<PuzzleIntrinsics<{0, 0, 0}>{}>>();
    }

    SUBCASE("Implicit Option Coverage") {
      // Cases with zero
      GENERATE_SUBCASE(PositiveDiagonalEvenConstraint, 0, 0, 0);
      // Regular cases
      GENERATE_SUBCASE(PositiveDiagonalEvenConstraint, 1, 1, 1);
      GENERATE_SUBCASE(PositiveDiagonalEvenConstraint, 2, 2, 5);
      GENERATE_SUBCASE(PositiveDiagonalEvenConstraint, 3, 3, 3);
      GENERATE_SUBCASE(PositiveDiagonalEvenConstraint, 7, 7, 4);
      GENERATE_SUBCASE(PositiveDiagonalEvenConstraint, 8, 8, 2);
    }

    SUBCASE("Explicit Options") {
      SUBCASE("2x2x0") {
        constexpr auto intriniscs = PuzzleIntrinsics<{2, 2, 0}>();
        checkConstraintOptions<intriniscs, 1, 0>(PositiveDiagonalEvenConstraint<intriniscs>(), 0, {}, 0, {});
      }

      SUBCASE("2x2x2") {
        constexpr auto intriniscs = PuzzleIntrinsics<{2, 2, 2}>();
        checkConstraintOptions<intriniscs, 1, 0>(PositiveDiagonalEvenConstraint<intriniscs>(),
                                                 2,
                                                 std::vector<Option<1>>{
                                                     {},
                                                     {},
                                                     {},
                                                     {0},
                                                     {},
                                                     {1},
                                                     {},
                                                     {},
                                                 },
                                                 0,
                                                 {});
      }

      SUBCASE("5x5x7") {
        constexpr auto intriniscs = PuzzleIntrinsics<{5, 5, 7}>{};
        checkConstraintOptions<intriniscs, 1, 0>(
            PositiveDiagonalEvenConstraint<intriniscs>(),
            5,
            std::vector<Option<1>>{
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},
                {}, {},  {}, {},  {}, {},  {}, {0}, {}, {0}, {}, {0}, {}, {},  {}, {},  {}, {},  {}, {},  {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {1}, {}, {1}, {}, {1}, {}, {},  {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {2}, {}, {2},
                {}, {2}, {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},
                {}, {},  {}, {3}, {}, {3}, {}, {3}, {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {4}, {}, {4}, {}, {4}, {}, {},  {}, {},  {}, {},  {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {}, {},  {},
            },
            0,
            {});
      }

      SUBCASE("9x9x9") {
        constexpr auto intriniscs = PuzzleIntrinsics<{9, 9, 9}>{};
        checkConstraintOptions<intriniscs, 1, 0>(
            PositiveDiagonalEvenConstraint<intriniscs>(),
            9,
            std::vector<Option<1>>{
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {0}, {}, {0}, {}, {0}, {}, {0}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {1}, {}, {1}, {}, {1}, {}, {1}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {2}, {}, {2}, {}, {2}, {}, {2}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {3}, {}, {3}, {}, {3}, {}, {3}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {4}, {}, {4}, {}, {4}, {}, {4}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {5}, {}, {5}, {}, {5}, {}, {5}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {6}, {}, {6}, {}, {6}, {}, {6}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {7}, {}, {7}, {}, {7}, {}, {7}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {8}, {}, {8}, {}, {8}, {}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {}, {},  {}, {},  {}, {},  {}, {},  {},
            },
            0,
            {});
      }
    }
  }
}