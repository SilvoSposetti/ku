
#include "constraintTemplated/ExactPositiveDiagonalConstraint.hpp"

#include "ConstraintTestHelpers.hpp"

#include <doctest.h>

TEST_SUITE("Constraints") {

  TEST_CASE("ExactPositiveDiagonalConstraint") {

    SUBCASE("Members") {
      memberChecks<ExactPositiveDiagonalConstraint<PuzzleIntrinsics<{0, 0, 0}>{}>>();
    }

    SUBCASE("Implicit Option Coverage") {
      // Cases with zero
      GENERATE_SUBCASE(ExactPositiveDiagonalConstraint, 0, 0, 0);
      // Regular cases
      GENERATE_SUBCASE(ExactPositiveDiagonalConstraint, 1, 1, 1);
      GENERATE_SUBCASE(ExactPositiveDiagonalConstraint, 2, 2, 2);
      GENERATE_SUBCASE(ExactPositiveDiagonalConstraint, 3, 3, 3);
      GENERATE_SUBCASE(ExactPositiveDiagonalConstraint, 7, 7, 7);
      GENERATE_SUBCASE(ExactPositiveDiagonalConstraint, 8, 8, 8);
      GENERATE_SUBCASE(ExactPositiveDiagonalConstraint, 15, 15, 15);
    }

    SUBCASE("Explicit Options") {
      SUBCASE("2x2x2") {
        constexpr auto intrinsics = PuzzleIntrinsics<{2, 2, 2}>();
        checkConstraintOptions<intrinsics, 1, 0>(ExactPositiveDiagonalConstraint<intrinsics>(),
                                                 2,
                                                 std::vector<Option<1>>{{}, {}, {0}, {1}, {0}, {1}, {}, {}},
                                                 0,
                                                 {});
      }
      SUBCASE("5x5x5") {
        constexpr auto intrinsics = PuzzleIntrinsics<{5, 5, 5}>{};
        checkConstraintOptions<intrinsics, 1, 0>(
            ExactPositiveDiagonalConstraint<intrinsics>(),
            5,
            std::vector<Option<1>>{{}, {}, {},  {},  {},  {},  {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {},
                                    {}, {}, {0}, {1}, {2}, {3}, {4}, {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {},
                                    {}, {}, {},  {},  {0}, {1}, {2}, {3}, {4}, {},  {},  {},  {},  {},  {},  {}, {}, {},
                                    {}, {}, {},  {},  {},  {},  {0}, {1}, {2}, {3}, {4}, {},  {},  {},  {},  {}, {}, {},
                                    {}, {}, {},  {},  {},  {},  {},  {},  {0}, {1}, {2}, {3}, {4}, {},  {},  {}, {}, {},
                                    {}, {}, {},  {},  {},  {},  {},  {},  {},  {},  {0}, {1}, {2}, {3}, {4}, {}, {}, {},
                                    {}, {}, {},  {},  {},  {},  {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}},
            0,
            {});
      }

      SUBCASE("9x9x9") {
        constexpr auto intrinsics = PuzzleIntrinsics<{9, 9, 9}>{};
        checkConstraintOptions<intrinsics, 1, 0>(
            ExactPositiveDiagonalConstraint<intrinsics>(),
            9,
            std::vector<Option<1>>{
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {},  {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
                {},  {},  {},  {},  {},  {},  {},  {},  {}},
            0,
            {});
      }
    }
  }
}